Here’s a content list of common design patterns implemented in C++:

1. Creational Patterns
Singleton

Ensures a class has only one instance and provides a global access point to it.
Use cases: Logging, database connections, thread pools.
Factory Method

Defines an interface for creating objects, but allows subclasses to alter the type of objects that will be created.
Use cases: GUI elements, shapes, vehicle creation.
Abstract Factory

Provides an interface for creating families of related or dependent objects without specifying their concrete classes.
Use cases: UI toolkits (widgets like buttons, menus, etc.), cross-platform systems.
Builder

Separates the construction of a complex object from its representation, allowing the same construction process to create different representations.
Use cases: Constructing complex objects like configurations, reports, and documents.
Prototype

Specifies the kind of objects to create using a prototypical instance and creates new objects by copying this prototype.
Use cases: Object cloning, copying objects with default or deep copies.
2. Structural Patterns
Adapter

Converts one interface to another expected by the client, enabling incompatible interfaces to work together.
Use cases: Integrating legacy systems, database connections, third-party libraries.
Bridge

Decouples an abstraction from its implementation, allowing the two to vary independently.
Use cases: Graphic frameworks, different types of remote control systems.
Composite

Composes objects into tree-like structures to represent part-whole hierarchies. Makes the client treat individual objects and compositions uniformly.
Use cases: File system structures, GUI layouts, hierarchies in organizations.
Decorator

Attaches additional responsibilities to an object dynamically. Used to extend functionality without modifying the original object.
Use cases: Adding functionalities like logging, caching, or security.
Facade

Provides a simplified interface to a complex subsystem, making it easier to use.
Use cases: Complex libraries, frameworks, APIs, and subsystems.
Flyweight

Reduces the memory usage by sharing common parts of state between multiple objects instead of storing duplicate information.
Use cases: Game objects, shared resources in large applications.
Proxy

Provides a surrogate or placeholder for another object, controlling access to it. This can be for performance, access control, or lazy initialization.
Use cases: Virtual proxies, protection proxies, remote proxies.
3. Behavioral Patterns
Chain of Responsibility

Passes a request along a chain of handlers, allowing multiple objects to process it without the sender needing to know which handler will process it.
Use cases: Event handling systems, validation chains, logging systems.
Command

Encapsulates a request as an object, thereby allowing parameterization of clients with different requests, queuing of requests, and logging of the requests.
Use cases: Undo/redo operations, menu systems, task scheduling.
Interpreter

Defines a grammatical representation for a language and an interpreter that uses the grammar to interpret sentences in the language.
Use cases: Expression evaluators, SQL parsers, regular expression engines.
Iterator

Provides a way to access the elements of a collection sequentially without exposing its underlying representation.
Use cases: Traversing collections like arrays, lists, or trees.
Mediator

Defines an object that centralizes communication between objects to reduce the dependency between them.
Use cases: Chat systems, GUI components like buttons and text fields, coordination between system components.
Memento

Captures and externalizes an object’s internal state without violating encapsulation so that the object can be restored to this state later.
Use cases: Undo functionality, state snapshots in game engines.
Observer

Defines a one-to-many dependency between objects, where an object (subject) notifies its dependents (observers) of state changes, usually by calling one of their methods.
Use cases: Event handling systems, UI updates, dependency tracking.
State

Allows an object to change its behavior when its internal state changes. The object will appear to change its class.
Use cases: State machines, workflow systems, game engines.
Strategy

Defines a family of algorithms, encapsulates each one, and makes them interchangeable. The strategy pattern lets the algorithm vary independently from clients that use it.
Use cases: Sorting algorithms, different strategies for authentication, pricing calculations.
Template Method

Defines the skeleton of an algorithm in the method, deferring some steps to subclasses.
Use cases: Framework design, setting up default workflows, defining a common structure for certain operations.
Visitor

Lets you define a new operation without changing the classes of the elements on which it operates.
Use cases: Operating on object structures like ASTs (Abstract Syntax Trees), compiler design.
4. Concurrency Patterns
Thread Pool

Manages a pool of threads that can be reused to execute tasks asynchronously, minimizing overhead from frequent thread creation and destruction.
Use cases: Server-side applications, high-performance systems.
Producer-Consumer

Defines a multi-threaded model where one or more producer threads produce data that one or more consumer threads process.
Use cases: Buffer systems, task queues.
Read-Write Lock

Allows multiple threads to read a shared resource concurrently, but only one thread can write to it at a time.
Use cases: Optimized database access, shared file systems.
Future/Promise

Allows a result of a computation to be available in the future while allowing other tasks to execute in parallel.
Use cases: Asynchronous computation, non-blocking IO operations.
Singleton (Thread-Safe)

Ensures that only one instance of a class is created even in multi-threaded applications.
Use cases: Thread-safe logging, database connections.
5. Other Patterns
Null Object

Uses polymorphism to represent a default "do-nothing" object for cases where nulls would otherwise be used.
Use cases: Avoiding null checks, default behaviors in systems.
Lazy Initialization

Delays the creation of an object until it is needed to optimize performance.
Use cases: Caching, expensive resource initialization.
Data Mapper

Separates the in-memory objects from the database objects, providing a mapping layer between the two.
Use cases: Database management, ORM systems.
